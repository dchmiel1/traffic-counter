from abc import ABC, abstractmethod
from dataclasses import dataclass
from pathlib import Path
from typing import Iterable, Sequence

from traffic_counter.application.project import Project
from traffic_counter.domain.flow import Flow
from traffic_counter.domain.section import Section
from traffic_counter.domain.video import Video


@dataclass(frozen=True)
class ExportConfig:
    save_name: str
    save_suffix: str
    event_formats: set[str]
    count_intervals: set[int]


@dataclass(frozen=True)
class AnalysisConfig:
    do_events: bool
    do_counting: bool
    track_files: set[Path]
    export_config: ExportConfig
    num_processes: int
    logfile: Path


@dataclass(frozen=True)
class OtConfig:
    project: Project
    analysis: AnalysisConfig
    videos: Sequence[Video]
    track_path: Path
    sections: Sequence[Section]
    flows: Sequence[Flow]


class ConfigParser(ABC):
    """
    Serialize and parse config files generated by OTConfig
    """

    @abstractmethod
    def parse(
        self,
        file: Path,
    ) -> OtConfig:
        pass

    @abstractmethod
    def serialize(
        self,
        project: Project,
        video_files: Iterable[Video],
        track_files: Iterable[Path],
        sections: Iterable[Section],
        flows: Iterable[Flow],
        file: Path,
    ) -> None:
        pass
